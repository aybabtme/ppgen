package nop

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"io"
	"strings"

	"github.com/aybabtme/ppgen/gen"
)

type generator struct {
	w io.Writer

	pkgName string
	imports []*ast.ImportSpec
}

func (g *generator) WritePrelude() {
	fmt.Fprintf(g.w, "// Code generated by ppgen (github.com/aybabtme/ppgen).\n")
	fmt.Fprintf(g.w, "// DO NOT EDIT!\n")
	fmt.Fprintf(g.w, "\n")
	fmt.Fprintf(g.w, "package %s\n", g.pkgName)
}

func (g *generator) WriteImports() {
	if len(g.imports) == 1 {
		fmt.Fprintf(g.w, "import ")
	} else {
		fmt.Fprintf(g.w, "import (\n")
	}

	for _, impSpec := range g.imports {

		path := impSpec.Path.Value
		if impSpec.Name != nil {
			alias := impSpec.Name.Name
			fmt.Fprintf(g.w, "\t%s %s\n", alias, path)
		} else {
			fmt.Fprintf(g.w, "\t%s\n", path)
		}
	}

	if len(g.imports) == 1 {
		fmt.Fprintf(g.w, "\n")
	} else {
		fmt.Fprintf(g.w, ")\n")
	}
}

func Generate(dst, testDst io.Writer, src io.Reader, typeName string) error {
	pkgName, imports, iface, err := gen.FindIfaceDefn(src, typeName)
	if err != nil {
		return err
	}

	buf := bytes.NewBuffer(nil)
	g := generator{
		w:       buf,
		pkgName: pkgName,
		imports: imports,
	}
	g.WritePrelude()
	g.WriteImports()

	genTypeName := "nop" + typeName

	fmt.Fprintf(buf, "// %s returns a %s that does nothing.\n", strings.Title(genTypeName), typeName)
	fmt.Fprintf(buf, "func %s() %s { return %s{} }\n", strings.Title(genTypeName), typeName, genTypeName)

	fmt.Fprintf(buf, "type %s struct{}\n", genTypeName)

	for _, method := range iface.Methods {
		if method.Doc != "" {
			fmt.Fprintf(buf, "\n// %s", method.Doc)
		}
		fmt.Fprintf(buf, "func (%s) %s", genTypeName, method.Name)

		fmt.Fprintf(buf, "(")
		for i, param := range method.Params {
			if i != 0 {
				fmt.Fprintf(buf, ", ")
			}
			fmt.Fprintf(buf, "_ %s", param.TypeName)
		}
		fmt.Fprintf(buf, ")")

		if len(method.Results) != 0 {
			fmt.Fprintf(buf, " ")
			fmt.Fprintf(buf, "(")
			for i, result := range method.Results {
				if i != 0 {
					fmt.Fprintf(buf, ", ")
				}
				fmt.Fprintf(buf, "out%d %s", i, result.TypeName)
			}
			fmt.Fprintf(buf, ")")

			fmt.Fprintf(buf, " { return }\n")
		} else {
			fmt.Fprintf(buf, " {}\n")
		}

	}

	out, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}

	_, err = dst.Write(out)
	return err
}
